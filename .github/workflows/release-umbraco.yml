name: (Umbraco) Our.Umbraco Package Generation

on:
  workflow_run:
    workflows: [ "Build" ]
    types:
      - completed
jobs:
  our_umbraco:
    name: Our.Umbraco Package Generation
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    env:
      # Nuget Setup
      NUGET_VERSION: 'latest'
      NUGET_OUTPUT: ${{ github.workspace }}/nuget/
      NUGET_EXTRACTED: './.output/nuget/extracted/'

      # Project Setup
      PROJECT_NAME: 'Cogworks.Umbraco.Essentials'
      UMBRACO_OUTPUT: './.output/umbraco/'

    steps:
      - name: Checkout master
        uses: actions/checkout@v2
        with:
          ref: master
          fetch-depth: 0

      - name: Get version
        shell: bash
        run: |
          tag_check=$(git describe --exact-match `git rev-parse HEAD` | head -1)
          echo "VERSION=$tag_check" >> $GITHUB_ENV

      - name: Configure NuGet
        uses: nuget/setup-nuget@v1
        with:
          nuget-version: ${{ env.NUGET_VERSION }}

      - name: Download a single artifact
        uses: aochmann/actions-download-artifact@1.0.2
        with:
          name: build_${{ env.PROJECT_NAME }}.${{ env.VERSION }}
          path: ${{ env.NUGET_OUTPUT }}

      - name: Extract NuGet file
        shell: pwsh
        run: |
          Install-Package -Name ${{ env.PROJECT_NAME }} -Source ${{ env.NUGET_OUTPUT }} -Destination ${{ env.NUGET_EXTRACTED }}

      - name: Copy package dlls
        shell: bash
        run: |
          mkdir -p ${{ env.UMBRACO_OUTPUT }} && find ${{ env.NUGET_EXTRACTED }} -name "*.dll" -print0 | xargs -0 -I {} cp -r {} ${{ env.UMBRACO_OUTPUT }}

      - name: Copy package App_Plugins
        shell: bash
        run: |
          mkdir -p ${{ env.UMBRACO_OUTPUT }} && find . -type d -regex ".*/${{ env.PROJECT_NAME }}.${{ env.VERSION }}/.*App_Plugins" -print0 |  xargs -0 -I {} cp -r {} ${{ env.UMBRACO_OUTPUT }}

      - name: Check Umbraco output directory
        shell: bash
        run: |
          is_empty_directory=$([ "$(ls -A ${{ env.UMBRACO_OUTPUT }})" ] && echo false || echo true)

          if [[ is_empty_directory == true ]]; then
            echo "Empty output directory: ${{ env.UMBRACO_OUTPUT }}"
            exit 1
          fi

      - name: Upload Our.Umbraco package Artifact to GitHub Action
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PROJECT_NAME }}.${{ env.VERSION }}
          path: ${{ env.UMBRACO_OUTPUT }}
