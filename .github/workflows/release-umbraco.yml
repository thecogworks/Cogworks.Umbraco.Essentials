name: (Umbraco) Our.Umbraco Package Generation

on:
  workflow_run:
    workflows: [ "Build" ]
    types:
      - completed
jobs:
  configuration:
    name: Configuration
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event != 'pull_request' }}
    runs-on: ubuntu-latest
    outputs:
      UMBRACO_ENABLED: ${{ steps.config.outputs.UMBRACO_ENABLED }}
    steps:
      - name: Get Umbraco status
        id: config
        run: |
          echo "::set-output name=UMBRACO_ENABLED::${{ secrets.UMBRACO_ENABLED }}"

  our_umbraco:
    name: Our.Umbraco Package Generation
    needs: [ "configuration" ]
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event != 'pull_request' && needs.configuration.outputs.UMBRACO_ENABLED == 'true' }}
    runs-on: windows-latest
    env:
      # Nuget Setup
      NUGET_VERSION: 'latest'
      NUGET_OUTPUT: ${{ github.workspace }}\nuget\
      NUGET_EXTRACTED: '${{ github.workspace }}\.output\nuget\extracted\'

      # Dotnet Setup
      DOTNET_VERSION: 3.1.401

      # Stop wasting time caching packages
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

      # Disable sending usage data to Microsoft
      DOTNET_CLI_TELEMETRY_OPTOUT: true

      # Solution Setup
      CONFIG: 'Release'
      PROJECT_NAME: 'Cogworks.Umbraco.Essentials'
      VERSION: '1.0.0'
      UMBRACO_OUTPUT: '${{ github.workspace }}\.output\umbraco\'
      UMBRACO_OUTPUT_EXTRACTED: '${{ github.workspace }}\.output\umbraco\extracted'

    steps:
      - name: Checkout master
        uses: actions/checkout@v2
        with:
          ref: master
          fetch-depth: 0

      - name: Get version
        shell: bash
        run: |
          tag_check=$(git describe --exact-match `git rev-parse HEAD` | head -1)
          echo "VERSION=$tag_check" >> $GITHUB_ENV

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      - name: Configure NuGet
        uses: nuget/setup-nuget@v1
        with:
          nuget-version: ${{ env.NUGET_VERSION }}

      - name: Install tools
        run: dotnet tool restore

      - name: NuGet Restore
        shell: powershell
        working-directory: ${{ github.workspace }}
        run: |
          $solutions = Get-ChildItem -Path .\Source -Recurse -Include *.sln

          foreach ($solutionFile in $solutions){
            nuget restore "$solutionFile"
          }

      - name: Install Dependencies
        shell: powershell
        working-directory: ${{ github.workspace }}
        run: |
          $solutions = Get-ChildItem -Path .\Source -Recurse -Include *.sln
          foreach ($solutionFile in $solutions){
            dotnet restore "$solutionFile"
          }

      - name: Build
        shell: powershell
        working-directory: ${{ github.workspace }}
        run: |
          $solutions = Get-ChildItem -Path .\Source -Recurse -Include *.sln

          foreach ($solutionFile in $solutions){
            msbuild.exe "$solutionFile" `
              /p:Configuration=${{ env.CONFIG }}
          }

      - name: Build Our Package
        shell: powershell
        working-directory: ${{ github.workspace }}
        run: |
          $currentDirectory=$PWD

          $packages = Get-ChildItem -Path .\Source -Recurse -Include our.package.xml

          foreach ($package in $solutions){
            cd "$($package.Directory.FullName)"

            dotnet umbpack pack $package \
             -v ${{ env.VERSION }} \
             -n ${{ env.PROJECT_NAME }}.${{ env.VERSION }}.zip \
             -o ${{ env.UMBRACO_OUTPUT }}

             cd $currentDirectory
          }

      - name: Extract Zip
        shell: powershell
        run: |
          $umbracoOurPath="${{ env.UMBRACO_OUTPUT }}\${{ env.PROJECT_NAME }}.${{ env.VERSION }}.zip"
          Expand-Archive -Path $umbracoOurPath -DestinationPath ${{ env.UMBRACO_OUTPUT_EXTRACTED }}

      - name: Upload Our.Umbraco package Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PROJECT_NAME }}.${{ env.VERSION }}
          path: ${{ env.UMBRACO_OUTPUT_EXTRACTED }}
